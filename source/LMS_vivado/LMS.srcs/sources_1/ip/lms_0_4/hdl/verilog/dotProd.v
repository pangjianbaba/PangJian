// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dotProd (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_0_V_read,
        w_1_V_read,
        w_2_V_read,
        w_3_V_read,
        w_4_V_read,
        w_5_V_read,
        w_6_V_read,
        w_7_V_read,
        x_0_V_read,
        x_1_V_read,
        x_2_V_read,
        x_3_V_read,
        x_4_V_read,
        x_5_V_read,
        x_6_V_read,
        x_7_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] w_0_V_read;
input  [15:0] w_1_V_read;
input  [15:0] w_2_V_read;
input  [15:0] w_3_V_read;
input  [15:0] w_4_V_read;
input  [15:0] w_5_V_read;
input  [15:0] w_6_V_read;
input  [15:0] w_7_V_read;
input  [13:0] x_0_V_read;
input  [13:0] x_1_V_read;
input  [13:0] x_2_V_read;
input  [13:0] x_3_V_read;
input  [13:0] x_4_V_read;
input  [13:0] x_5_V_read;
input  [13:0] x_6_V_read;
input  [13:0] x_7_V_read;
output  [13:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] p_Val2_s_reg_182;
reg   [3:0] i_reg_194;
wire   [0:0] tmp_fu_227_p2;
reg   [0:0] tmp_reg_482;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] i_3_fu_233_p2;
reg   [3:0] i_3_reg_486;
reg    ap_enable_reg_pp0_iter0;
wire   [13:0] x_V_load_phi_fu_243_p66;
reg  signed [13:0] x_V_load_phi_reg_491;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_i_phi_fu_198_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_w_V_load_phi_reg_206;
reg  signed [15:0] ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206;
wire   [5:0] x_V_load_phi_fu_243_p65;
wire  signed [29:0] grp_fu_337_p3;
wire   [29:0] grp_fu_337_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_174;
reg    ap_condition_99;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

lms_mux_646_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .din3_WIDTH( 14 ),
    .din4_WIDTH( 14 ),
    .din5_WIDTH( 14 ),
    .din6_WIDTH( 14 ),
    .din7_WIDTH( 14 ),
    .din8_WIDTH( 14 ),
    .din9_WIDTH( 14 ),
    .din10_WIDTH( 14 ),
    .din11_WIDTH( 14 ),
    .din12_WIDTH( 14 ),
    .din13_WIDTH( 14 ),
    .din14_WIDTH( 14 ),
    .din15_WIDTH( 14 ),
    .din16_WIDTH( 14 ),
    .din17_WIDTH( 14 ),
    .din18_WIDTH( 14 ),
    .din19_WIDTH( 14 ),
    .din20_WIDTH( 14 ),
    .din21_WIDTH( 14 ),
    .din22_WIDTH( 14 ),
    .din23_WIDTH( 14 ),
    .din24_WIDTH( 14 ),
    .din25_WIDTH( 14 ),
    .din26_WIDTH( 14 ),
    .din27_WIDTH( 14 ),
    .din28_WIDTH( 14 ),
    .din29_WIDTH( 14 ),
    .din30_WIDTH( 14 ),
    .din31_WIDTH( 14 ),
    .din32_WIDTH( 14 ),
    .din33_WIDTH( 14 ),
    .din34_WIDTH( 14 ),
    .din35_WIDTH( 14 ),
    .din36_WIDTH( 14 ),
    .din37_WIDTH( 14 ),
    .din38_WIDTH( 14 ),
    .din39_WIDTH( 14 ),
    .din40_WIDTH( 14 ),
    .din41_WIDTH( 14 ),
    .din42_WIDTH( 14 ),
    .din43_WIDTH( 14 ),
    .din44_WIDTH( 14 ),
    .din45_WIDTH( 14 ),
    .din46_WIDTH( 14 ),
    .din47_WIDTH( 14 ),
    .din48_WIDTH( 14 ),
    .din49_WIDTH( 14 ),
    .din50_WIDTH( 14 ),
    .din51_WIDTH( 14 ),
    .din52_WIDTH( 14 ),
    .din53_WIDTH( 14 ),
    .din54_WIDTH( 14 ),
    .din55_WIDTH( 14 ),
    .din56_WIDTH( 14 ),
    .din57_WIDTH( 14 ),
    .din58_WIDTH( 14 ),
    .din59_WIDTH( 14 ),
    .din60_WIDTH( 14 ),
    .din61_WIDTH( 14 ),
    .din62_WIDTH( 14 ),
    .din63_WIDTH( 14 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 14 ))
lms_mux_646_14_1_1_U1(
    .din0(x_0_V_read),
    .din1(x_1_V_read),
    .din2(x_2_V_read),
    .din3(x_3_V_read),
    .din4(x_4_V_read),
    .din5(x_5_V_read),
    .din6(x_6_V_read),
    .din7(x_7_V_read),
    .din8(x_7_V_read),
    .din9(x_7_V_read),
    .din10(x_7_V_read),
    .din11(x_7_V_read),
    .din12(x_7_V_read),
    .din13(x_7_V_read),
    .din14(x_7_V_read),
    .din15(x_7_V_read),
    .din16(x_7_V_read),
    .din17(x_7_V_read),
    .din18(x_7_V_read),
    .din19(x_7_V_read),
    .din20(x_7_V_read),
    .din21(x_7_V_read),
    .din22(x_7_V_read),
    .din23(x_7_V_read),
    .din24(x_7_V_read),
    .din25(x_7_V_read),
    .din26(x_7_V_read),
    .din27(x_7_V_read),
    .din28(x_7_V_read),
    .din29(x_7_V_read),
    .din30(x_7_V_read),
    .din31(x_7_V_read),
    .din32(x_7_V_read),
    .din33(x_7_V_read),
    .din34(x_7_V_read),
    .din35(x_7_V_read),
    .din36(x_7_V_read),
    .din37(x_7_V_read),
    .din38(x_7_V_read),
    .din39(x_7_V_read),
    .din40(x_7_V_read),
    .din41(x_7_V_read),
    .din42(x_7_V_read),
    .din43(x_7_V_read),
    .din44(x_7_V_read),
    .din45(x_7_V_read),
    .din46(x_7_V_read),
    .din47(x_7_V_read),
    .din48(x_7_V_read),
    .din49(x_7_V_read),
    .din50(x_7_V_read),
    .din51(x_7_V_read),
    .din52(x_7_V_read),
    .din53(x_7_V_read),
    .din54(x_7_V_read),
    .din55(x_7_V_read),
    .din56(x_7_V_read),
    .din57(x_7_V_read),
    .din58(x_7_V_read),
    .din59(x_7_V_read),
    .din60(x_7_V_read),
    .din61(x_7_V_read),
    .din62(x_7_V_read),
    .din63(x_7_V_read),
    .din64(x_V_load_phi_fu_243_p65),
    .dout(x_V_load_phi_fu_243_p66)
);

lms_mac_muladd_14bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
lms_mac_muladd_14bkb_U2(
    .din0(x_V_load_phi_reg_491),
    .din1(ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206),
    .din2(grp_fu_337_p2),
    .dout(grp_fu_337_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_99)) begin
        if (((tmp_fu_227_p2 == 1'd0) & (ap_phi_mux_i_phi_fu_198_p4 == 4'd0))) begin
            ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206 <= w_0_V_read;
        end else if ((1'b1 == ap_condition_174)) begin
            ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206 <= w_7_V_read;
        end else if (((tmp_fu_227_p2 == 1'd0) & (ap_phi_mux_i_phi_fu_198_p4 == 4'd6))) begin
            ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206 <= w_6_V_read;
        end else if (((tmp_fu_227_p2 == 1'd0) & (ap_phi_mux_i_phi_fu_198_p4 == 4'd5))) begin
            ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206 <= w_5_V_read;
        end else if (((tmp_fu_227_p2 == 1'd0) & (ap_phi_mux_i_phi_fu_198_p4 == 4'd4))) begin
            ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206 <= w_4_V_read;
        end else if (((tmp_fu_227_p2 == 1'd0) & (ap_phi_mux_i_phi_fu_198_p4 == 4'd3))) begin
            ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206 <= w_3_V_read;
        end else if (((tmp_fu_227_p2 == 1'd0) & (ap_phi_mux_i_phi_fu_198_p4 == 4'd2))) begin
            ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206 <= w_2_V_read;
        end else if (((tmp_fu_227_p2 == 1'd0) & (ap_phi_mux_i_phi_fu_198_p4 == 4'd1))) begin
            ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206 <= w_1_V_read;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_w_V_load_phi_reg_206 <= ap_phi_reg_pp0_iter0_w_V_load_phi_reg_206;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_482 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_194 <= i_3_reg_486;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_194 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_482 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_Val2_s_reg_182 <= {{grp_fu_337_p3[29:16]}};
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_182 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_3_reg_486 <= i_3_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_482 <= tmp_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_V_load_phi_reg_491 <= x_V_load_phi_fu_243_p66;
    end
end

always @ (*) begin
    if ((tmp_fu_227_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_482 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_198_p4 = i_3_reg_486;
    end else begin
        ap_phi_mux_i_phi_fu_198_p4 = i_reg_194;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((tmp_fu_227_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_fu_227_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_174 = (~(ap_phi_mux_i_phi_fu_198_p4 == 4'd0) & ~(ap_phi_mux_i_phi_fu_198_p4 == 4'd6) & ~(ap_phi_mux_i_phi_fu_198_p4 == 4'd5) & ~(ap_phi_mux_i_phi_fu_198_p4 == 4'd4) & ~(ap_phi_mux_i_phi_fu_198_p4 == 4'd3) & ~(ap_phi_mux_i_phi_fu_198_p4 == 4'd2) & ~(ap_phi_mux_i_phi_fu_198_p4 == 4'd1) & (tmp_fu_227_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_99 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_w_V_load_phi_reg_206 = 'bx;

assign ap_return = p_Val2_s_reg_182;

assign grp_fu_337_p2 = {{p_Val2_s_reg_182}, {16'd0}};

assign i_3_fu_233_p2 = (ap_phi_mux_i_phi_fu_198_p4 + 4'd1);

assign tmp_fu_227_p2 = ((ap_phi_mux_i_phi_fu_198_p4 == 4'd8) ? 1'b1 : 1'b0);

assign x_V_load_phi_fu_243_p65 = ap_phi_mux_i_phi_fu_198_p4;

endmodule //dotProd
